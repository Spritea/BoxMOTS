import numpy as np
import pickle,os
from pathlib import Path
from tqdm import tqdm
from bdd_category_dict import bdd_val_img_id_dict
import argparse

# this file reid_feat_to_strong_sort.py is to
# convert reid feat generated by my condinst+ReID to strong_sort project.
# need to do reid feat normalization, since it's normed in strong_sort.
# norm is used for original deepsort reid model, its reid feat is already normed.
# norm is not necessary, since BoT ReID feat is not normed either.
# need to check the frame_start id, since it's 1 in MOT17, but 0 in KITTI MOTS.

# npy format: frame,-1,x,y,w,h,score,-1,-1,-1,feature-128d.
# all in float64.

def deal_seq_one_del_nan(seq_id,pkl_content):
    """Remove the nan reid feat and paired box generated by mask pool reid.
    """
    def choose_seq_one(seq_id,pkl_content):
        def choose_seq_id(line_one,seq_id):
            if bdd_val_img_id_dict[line_one['img_info']['image_id']]['video_id'] ==seq_id:
                return True
            return False
        seq_one=list(filter(lambda x: choose_seq_id(x,seq_id),pkl_content))
        return seq_one
    seq_one=choose_seq_one(seq_id=seq_id,pkl_content=pkl_content)
    # change line one to numpy.
    list_seq_one=[]
    for line_one in seq_one:
        # frame_id needs to start from 1 to be the same with img filename for deep_sort.
        frame_id=float(bdd_val_img_id_dict[line_one['img_info']['image_id']]['frame_id']+1)
        x,y=line_one['pred_box_ori_size'][0][0],line_one['pred_box_ori_size'][0][1]
        w,h=line_one['pred_box_ori_size'][0][2]-x,line_one['pred_box_ori_size'][0][3]-y
        score=line_one['box_score']
        feat=line_one['reid_feat']
        # in fact, the reid feat nan doesn't make any difference in DeepSORT,
        # since the pred_box score is low like 0.2, and the reid feat nan and its paired pred_box
        # would be removed in DeepSORT at the beginning.
        if np.isnan(feat).any():
            continue
        line_one_np=np.concatenate(([frame_id,-1,x,y,w,h,score,-1,-1,-1],feat),dtype=np.float64)
        list_seq_one.append(line_one_np)
    if len(list_seq_one)==0:
        # one img could have no prediction.
        dummy_det=np.array([1,-1,100,100,50,50,0.001,-1,-1,-1])
        dummy_reid=np.random.rand(32)
        dummy_line_one=np.hstack([dummy_det,dummy_reid])
        return np.vstack([dummy_line_one,dummy_line_one])
    # for 1d array, can't replace np.vstack with np.concatenate.
    np_seq_one=np.vstack(list_seq_one)
    return np_seq_one

if __name__=="__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--file_path',type=str,required=True)
    parser.add_argument('--out_dir',type=str,required=True)
    args = parser.parse_args()
    file_path = args.file_path
    out_dir_arg = args.out_dir
    
    # file_path="../my_data_bdd/reid_one_class_infer_for_train/COCO_pretrain_strong/iter_7k_seq_shuffle_fl_2_lr_0_001_eval_500/CondInst_MS_R_50_1x_kitti_mots/reid_infer_out/iter_0006999/reid_infer_out.pkl"
    # out_dir_arg="../my_data_bdd/reid_one_class_infer_for_train/COCO_pretrain_strong/iter_7k_seq_shuffle_fl_2_lr_0_001_eval_500/CondInst_MS_R_50_1x_kitti_mots/reid_np/iter_0006999/"
    with open(file_path,"rb") as f:
        pkl_content_ori=pickle.load(f)
    # seperate car:0/pedestrian:1
    # cat={'car':0,'pedestrian':1}
    cat={'pedestrian':0,'rider':1,'car':2,'truck':3,'bus':4,'motorcycle':6,'bicycle':7}
    for cat_choose in cat.keys():
        class_id=cat[cat_choose]
        # class_id=1
        pkl_content=list(filter(lambda x: x['pred_class']==class_id,pkl_content_ori))
        # get seq id.
        seq_id_list=list(range(1,33))
        
        out_dir=out_dir_arg+cat_choose
        os.makedirs(out_dir,exist_ok=True)
        for seq_id in tqdm(seq_id_list):
            np_seq_one=deal_seq_one_del_nan(seq_id,pkl_content)
            out_path=out_dir+'/'+str(seq_id).zfill(4)+'.npy'
            np.save(out_path,np_seq_one)
    
    print('kk')

