# @File: StrongSORT/my_code_for_MOSE/MOSE_reid_feat_to_strong_sort.py 
# @Author: cws 
# @Create Date: 2024/02/24
# @Desc: DeepSort directly use the int(img_name) to get each frame id.
# The frams_start id is 0 for MOSE,
# because the img name starts with 00000.jpg.

import numpy as np
import pickle,os
from pathlib import Path
from tqdm import tqdm
from natsort import os_sorted

# this file reid_feat_to_strong_sort.py is to
# convert reid feat generated by my condinst+ReID to strong_sort project.
# need to do reid feat normalization, since it's normed in strong_sort.
# norm is used for original deepsort reid model, its reid feat is already normed.
# norm is not necessary, since BoT ReID feat is not normed either.
# need to check the frame_start id, since it's 1 in MOT17, but 0 in KITTI MOTS.

# npy format: frame,-1,x,y,w,h,score,-1,-1,-1,feature-128d.
# all in float64.

def load_pkl(file_path):
    with open(file_path,"rb") as f:
        pkl_content_ori=pickle.load(f)
    return pkl_content_ori

def build_dummy_reid():
    # use dummy reid with extremely low score 0.001.
    # it will be filtered out by deepsort due to the extremely low score.
    # use this when the img/seq does not have det/reid result.
    dummy_det=np.array([1,-1,100,100,50,50,0.001,-1,-1,-1])
    dummy_reid=np.random.rand(32)
    dummy_line_one=np.hstack([dummy_det,dummy_reid])
    return np.vstack([dummy_line_one,dummy_line_one])

def deal_seq_one_del_nan(pkl_content):
    """Remove the nan reid feat and paired box generated by mask pool reid.
    """
    # change line one to numpy.
    list_seq_one=[]
    for line_one in pkl_content:
        frame_id=float(Path(line_one['img_info']['file_name']).stem)
        x,y=line_one['pred_box_ori_size'][0][0],line_one['pred_box_ori_size'][0][1]
        w,h=line_one['pred_box_ori_size'][0][2]-x,line_one['pred_box_ori_size'][0][3]-y
        score=line_one['box_score']
        feat=line_one['reid_feat']
        # in fact, the reid feat nan doesn't make any difference in DeepSORT,
        # since the pred_box score is low like 0.2, and the reid feat nan and its paired pred_box
        # would be removed in DeepSORT at the beginning.
        if np.isnan(feat).any():
            continue
        line_one_np=np.concatenate(([frame_id,-1,x,y,w,h,score,-1,-1,-1],feat),dtype=np.float64)
        list_seq_one.append(line_one_np)
    contains_empty = 0
    if len(list_seq_one)==0:
        # one img could have no car prediction.
        # the very low score 0.001 will make this dummy det result get filtered out in deepsort.
        dummy_det=np.array([1,-1,100,100,50,50,0.001,-1,-1,-1])
        dummy_reid=np.random.rand(32)
        dummy_line_one=np.hstack([dummy_det,dummy_reid])
        contains_empty = 1
        return np.vstack([dummy_line_one,dummy_line_one]), contains_empty
    # for 1d array, can't replace np.vstack with np.concatenate.
    np_seq_one=np.vstack(list_seq_one)
    return np_seq_one, contains_empty

if __name__ == "__main__":
    reid_result_dir = "../my_data_for_MOSE/MOSE_car_seq_out_pair_warp/valid_car_seq"
    outdir = reid_result_dir.replace("my_data_for_MOSE", "my_data_for_MOSE_track_result")
    # outdir = str(Path(outdir).parent)
    outdir = os.path.join(outdir, "reid_np/car")
    os.makedirs(outdir, exist_ok=True)
    seq_list = os_sorted(os.listdir(reid_result_dir))
    seq_ped_det = []
    empty_det = []
    for seq_one in tqdm(seq_list):
        reid_result_seq_one = os.path.join(reid_result_dir, seq_one, "reid_out/reid_infer_out.pkl")
        outpath = os.path.join(outdir, seq_one+'.npy')
        if not os.path.isfile(reid_result_seq_one):
            # no det and reid result for one seq.
            np_seq_one = build_dummy_reid()
            np.save(outpath, np_seq_one)
            print(f'no reid_infer_out.pkl seq: {seq_one}')
            continue
        pkl_content_seq_one = load_pkl(reid_result_seq_one)
        # seperate car:0/pedestrian:1 in reid_infer_out.pkl
        pkl_content_car=list(filter(lambda x: x['pred_class']==0, pkl_content_seq_one))
        np_seq_one, contains_empty=deal_seq_one_del_nan(pkl_content_car)
        if contains_empty:
            empty_det.append(seq_one)
        np.save(outpath, np_seq_one)
    print(f'empty car det seq: {empty_det}')
    print('kk')

