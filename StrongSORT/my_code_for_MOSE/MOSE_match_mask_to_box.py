# @File: StrongSORT/my_code_for_MOSE/MOSE_match_mask_to_box.py 
# @Author: cws 
# @Create Date: 2024/02/24
# @Desc: Match box based tracking result txt to paired mask in mots_det_seg txt for MOSE.

import numpy as np
from utils import iou,linear_assignment
import os
from tqdm import tqdm
from pathlib import Path
from natsort import os_sorted

def load_txt(file_name):
    with open(file_name,'r') as f:
        txt_content=f.read().splitlines()
    return txt_content

def deal_seq_one(track_txt_file, mask_txt_file, out_path, det_min_conf):
    # ndmin=2 is needed to always get 2d array,
    # when the track_txt_file has only 1 line,
    # otherwise, it will return a 1d array when there is only 1 line in track_txt file.
    # np_track=np.loadtxt(track_txt_file,dtype=np.float64,delimiter=',')
    np_track=np.loadtxt(track_txt_file,dtype=np.float64,delimiter=',',ndmin=2)
    # since negative values could appear in x,y in np_track
    # np_track[np_track[:,2]<0,2]=0
    # np_track[np_track[:,3]<0,3]=0

    if len(np_track)==0:
        # some seqs don't have track results for ped.
        with open(out_path,'w') as f:
            f.writelines([])
        return
    
    with open(mask_txt_file,'r') as f:
        # read to a list and remove ending line character.
        mask_content=f.read().splitlines()
    frame_ids=np.unique((np_track[:,0]))
    # deepsort setting.
    # need change this.
    # det_min_conf=0.6
    # my setting, the shift caused by kaiman filter is usually not large.
    iou_threshold=0.1

    out_seq=[]
    for frame_id in frame_ids:
        np_track_frame_one=np_track[np_track[:,0]==frame_id,:]
        boxes_in_track=np_track_frame_one[:,2:6]

        frame_one_in_det=list(filter(lambda x: int(x.split(',')[0])==frame_id,mask_content))
        frame_one_in_det=list(filter(lambda x: float(x.split(',')[6])>=det_min_conf,frame_one_in_det))
        # list(map(int,x.split(',')[2:6])) is to convert string in a list to int.
        boxes_in_det=[list(map(int,x.split(',')[2:6])) for x in frame_one_in_det]
        
        # note: len(boxes_in_track) could > len(boxes_in_det),
        # since some boxes are generated by kalman filter.  
        iou_matrix = np.zeros((len(boxes_in_track), len(boxes_in_det)), dtype=np.float32)
        for d, det in enumerate(boxes_in_track):
            for t, trk in enumerate(boxes_in_det):
                iou_matrix[d, t] = iou(det, trk,box_mode='xywh')

        matched_indices = linear_assignment(-iou_matrix)
        matches = []
        for m in matched_indices:
            if iou_matrix[m[0], m[1]] >= iou_threshold:
                matches.append(m)

        # out: frame,track_id,class,height,width,rle.
        # class: car-1, ped-2.
        if len(matches)==0:
            continue
        for match_one in matches:
            track_box_id=match_one[0]
            det_box_id=match_one[1]
            track_id=np_track_frame_one[track_box_id][1]
            h_w_rle=frame_one_in_det[det_box_id].split(',')[-3:]
            # cat={'car':1,'pedestrian':2}
            # out_one=[int(frame_id),int(track_id),cat[cat_choose],h_w_rle[0],h_w_rle[1],h_w_rle[2]]
            out_one=[int(frame_id),int(track_id),1,h_w_rle[0],h_w_rle[1],h_w_rle[2]]
            out_one=' '.join(list(map(str,out_one)))+'\n'
            out_seq.append(out_one)
    
    with open(out_path,'w') as f:
        f.writelines(out_seq)

if __name__=="__main__":
    img_seqs_txt = "../my_code_for_MOSE/search_result/valid_car_seq.txt"
    seq_list = load_txt(img_seqs_txt)
    track_txt_dir = "../my_data_for_MOSE_track_result/MOSE_car_seq_out_pair_warp/valid_car_seq/results_mot/DeepSORT/min_det_conf_06_max_age_default_30_max_cos_0.6_no_kalman_gate/car"
    mask_txt_dir = "../my_data_for_MOSE_track_result/MOSE_car_seq_out_pair_warp/valid_car_seq/to_mots_txt/mots_det_seg/car"
    out_dir = "../my_data_for_MOSE_track_result/MOSE_car_seq_out_pair_warp/valid_car_seq/to_mots_txt/mots_seg_track/DeepSORT/mask_min_det_conf_04_min_det_conf_06_max_age_default_30_max_cos_0.6_no_kalman_gate/car"
    os.makedirs(out_dir, exist_ok=True)
    mask_det_min_conf=0.4
    for seq_one in tqdm(seq_list):
        track_txt_path = os.path.join(track_txt_dir, seq_one+".txt")
        mask_txt_path = os.path.join(mask_txt_dir, seq_one+".txt")
        out_path = os.path.join(out_dir, seq_one+".txt")
        deal_seq_one(track_txt_path, mask_txt_path, out_path, mask_det_min_conf)

