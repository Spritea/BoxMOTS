# @File: StrongSORT/my_code_for_ytvis_2019/ytvis_reid_feat_to_strong_sort.py 
# @Author: cws 
# @Create Date: 2024/04/21
# @Desc: Convert the reid feat to numpy format for deepsort.
# Based on: my_code_bdd/bdd_reid_feat_to_strong_sort.py.

import numpy as np
import pickle,os
from pathlib import Path
from tqdm import tqdm
import json

# this file reid_feat_to_strong_sort.py is to
# convert reid feat generated by my condinst+ReID to strong_sort project.
# need to do reid feat normalization, since it's normed in strong_sort.
# norm is used for original deepsort reid model, its reid feat is already normed.
# norm is not necessary, since BoT ReID feat is not normed either.
# need to check the frame_start id, since it's 1 in MOT17, but 0 in KITTI MOTS.

# npy format: frame,-1,x,y,w,h,score,-1,-1,-1,feature-128d.
# all in float64.

val_img_filename_dict = json.load(open('val_img_filename_to_frame_id_video_id_dict.json', 'r'))

def load_txt(file_name):
    with open(file_name,'r') as f:
        txt_content=f.read().splitlines()
    return txt_content

def deal_seq_one_del_nan(seq_id,pkl_content):
    """Remove the nan reid feat and paired box generated by mask pool reid.
    """
    def choose_seq_one(seq_id,pkl_content):
        def choose_seq_id(line_one,seq_id):
            img_filepath = line_one['img_info']['file_name']
            if Path(img_filepath).parts[-2] == seq_id:
                return True
            return False
        seq_one=list(filter(lambda x: choose_seq_id(x,seq_id),pkl_content))
        return seq_one
    seq_one=choose_seq_one(seq_id=seq_id,pkl_content=pkl_content)
    # change line one to numpy.
    list_seq_one=[]
    for line_one in seq_one:
        # frame_id needs to start from 1 to be the same with img filename for deep_sort.
        img_filename = '/'.join(Path(line_one['img_info']['file_name']).parts[-2:])
        frame_id=float(val_img_filename_dict[img_filename]['frame_id']+1)
        x,y=line_one['pred_box_ori_size'][0][0],line_one['pred_box_ori_size'][0][1]
        w,h=line_one['pred_box_ori_size'][0][2]-x,line_one['pred_box_ori_size'][0][3]-y
        score=line_one['box_score']
        feat=line_one['reid_feat']
        # in fact, the reid feat nan doesn't make any difference in DeepSORT,
        # since the pred_box score is low like 0.2, and the reid feat nan and its paired pred_box
        # would be removed in DeepSORT at the beginning.
        if np.isnan(feat).any():
            continue
        line_one_np=np.concatenate(([frame_id,-1,x,y,w,h,score,-1,-1,-1],feat),dtype=np.float64)
        list_seq_one.append(line_one_np)
    if len(list_seq_one)==0:
        # one img could have no prediction.
        dummy_det=np.array([1,-1,100,100,50,50,0.001,-1,-1,-1])
        dummy_reid=np.random.rand(32)
        dummy_line_one=np.hstack([dummy_det,dummy_reid])
        return np.vstack([dummy_line_one,dummy_line_one])
    # for 1d array, can't replace np.vstack with np.concatenate.
    np_seq_one=np.vstack(list_seq_one)
    return np_seq_one

if __name__=="__main__":
    
    file_path="../my_data_for_ytvis_2019/youtube_vis_2019_out_pair_warp/valid_for_VIS/combined_result_all_videos/combined_reid_infer_out.pkl"
    with open(file_path,"rb") as f:
        pkl_content_ori=pickle.load(f)
        
    # seperate car:0/pedestrian:1
    # cat={'car':0,'pedestrian':1}
    # class id in reid feat starts from 0.
    cat = {"person":0, "giant_panda":1, "lizard":2, "parrot":3, "skateboard":4,
           "sedan":5, "ape":6, "dog":7, "snake":8, "monkey":9, 
           "hand":10, "rabbit":11, "duck":12, "cat":13, "cow":14,
           "fish":15, "train":16, "horse":17, "turtle":18, "bear":19, 
           "motorbike":20, "giraffe":21, "leopard":22, "fox":23, "deer":24,
           "owl":25, "surfboard":26, "airplane":27, "truck":28, "zebra":29,
           "tiger":30, "elephant":31, "snowboard":32, "boat":33, "shark":34,
           "mouse":35, "frog":36, "eagle":37, "earless_seal":38, "tennis_racket":39}
    
    # get video seq list.
    img_filepath= [x['img_info']['file_name'] for x in pkl_content_ori]
    seq_id_list = [Path(x).parts[-2] for x in img_filepath]
    seq_id_list = list(set(seq_id_list))
    
    # load the full validation video id list.
    # needs to create the empty txt file even if there is no det result, needed by deepsort.
    val_video_id_list = load_txt("valid_set_video_names_for_VIS.txt")
    seq_id_list = val_video_id_list
    
    reid_result_dir = str(Path(file_path).parent)
    out_folder = reid_result_dir.replace("my_data_for_ytvis_2019", "my_data_for_ytvis_2019_track_result")
    out_folder = os.path.join(out_folder, "reid_np/")
    
    for cat_choose, class_id in tqdm(cat.items()):
        pkl_content=list(filter(lambda x: x['pred_class']==class_id,pkl_content_ori))
        
        out_dir=os.path.join(out_folder,cat_choose)
        os.makedirs(out_dir,exist_ok=True)
        for seq_id in tqdm(seq_id_list, leave=False):
            np_seq_one=deal_seq_one_del_nan(seq_id,pkl_content)
            out_path=out_dir+'/'+seq_id+'.npy'
            np.save(out_path,np_seq_one)
    
    print('kk')

