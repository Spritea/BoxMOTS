# @File: StrongSORT/my_code_for_ytvis_2019/ytvis_match_mask_to_box_w_score.py 
# @Author: cws 
# @Create Date: 2024/04/22
# @Desc: Match mask to box based tracking result for ytvis 2019 validation dataset.
# Keep the mask score, because track score is needed for ytvis 2019 validation submission.

import numpy as np
from utils import iou,linear_assignment
import os
from tqdm import tqdm

def load_txt(txt_file):
    with open(txt_file,'r') as f:
        content=f.read().splitlines()
    return content

def deal_seq_one(track_txt_file,mask_txt_file,cat_choose,out_path,det_min_conf):
    # ndmin=2 is needed to always get 2d array,
    # when the track_txt_file has only 1 line,
    # otherwise, it will return a 1d array when there is only 1 line in track_txt file.
    np_track=np.loadtxt(track_txt_file,dtype=np.float64,delimiter=',',ndmin=2)
    # since negative values could appear in x,y in np_track
    # np_track[np_track[:,2]<0,2]=0
    # np_track[np_track[:,3]<0,3]=0

    if len(np_track)==0:
        # some seqs don't have track results for ped.
        with open(out_path,'w') as f:
            f.writelines([])
        return
    
    with open(mask_txt_file,'r') as f:
        # read to a list and remove ending line character.
        mask_content=f.read().splitlines()
    frame_ids=np.unique((np_track[:,0]))
    # deepsort setting.
    # need change this.
    # det_min_conf=0.6
    # my setting, the shift caused by kaiman filter is usually not large.
    iou_threshold=0.1

    out_seq=[]
    for frame_id in frame_ids:
        np_track_frame_one=np_track[np_track[:,0]==frame_id,:]
        boxes_in_track=np_track_frame_one[:,2:6]

        frame_one_in_det=list(filter(lambda x: int(x.split(',')[0])==frame_id,mask_content))
        frame_one_in_det=list(filter(lambda x: float(x.split(',')[6])>=det_min_conf,frame_one_in_det))
        # list(map(int,x.split(',')[2:6])) is to convert string in a list to int.
        boxes_in_det=[list(map(int,x.split(',')[2:6])) for x in frame_one_in_det]
        
        # note: len(boxes_in_track) could > len(boxes_in_det),
        # since some boxes are generated by kalman filter.  
        iou_matrix = np.zeros((len(boxes_in_track), len(boxes_in_det)), dtype=np.float32)
        for d, det in enumerate(boxes_in_track):
            for t, trk in enumerate(boxes_in_det):
                iou_matrix[d, t] = iou(det, trk,box_mode='xywh')

        matched_indices = linear_assignment(-iou_matrix)
        matches = []
        for m in matched_indices:
            if iou_matrix[m[0], m[1]] >= iou_threshold:
                matches.append(m)

        # out: frame,track_id,class,mask_score,height,width,rle.
        # mask_score is needed to get the track score for ytvis 2019 validation set result submission.
        if len(matches)==0:
            continue
        for match_one in matches:
            track_box_id=match_one[0]
            det_box_id=match_one[1]
            track_id=np_track_frame_one[track_box_id][1]
            h_w_rle=frame_one_in_det[det_box_id].split(',')[-3:]
            mask_score = frame_one_in_det[det_box_id].split(',')[6]
            out_one=[int(frame_id),int(track_id),cat[cat_choose],float(mask_score),h_w_rle[0],h_w_rle[1],h_w_rle[2]]
            out_one=' '.join(list(map(str,out_one)))+'\n'
            out_seq.append(out_one)
    
    with open(out_path,'w') as f:
        f.writelines(out_seq)

if __name__=="__main__":
    mask_det_min_conf=0.4
    val_in_trainval_seqmap=load_txt("valid_set_video_names_for_VIS.txt")
    
    cat = {"person":1, "giant_panda":2, "lizard":3, "parrot":4, "skateboard":5,
           "sedan":6, "ape":7, "dog":8, "snake":9, "monkey":10, 
           "hand":11, "rabbit":12, "duck":13, "cat":14, "cow":15,
           "fish":16, "train":17, "horse":18, "turtle":19, "bear":20, 
           "motorbike":21, "giraffe":22, "leopard":23, "fox":24, "deer":25,
           "owl":26, "surfboard":27, "airplane":28, "truck":29, "zebra":30,
           "tiger":31, "elephant":32, "snowboard":33, "boat":34, "shark":35,
           "mouse":36, "frog":37, "eagle":38, "earless_seal":39, "tennis_racket":40}
    
    track_txt_dir="../my_data_for_ytvis_2019_track_result/youtube_vis_2019_out_pair_warp/valid_for_VIS/combined_result_all_videos/results_mot/DeepSORT/min_det_conf_04_max_cos_0.6_no_kalman_gate/"
    mask_txt_dir="../my_data_for_ytvis_2019_track_result/youtube_vis_2019_out_pair_warp/valid_for_VIS/combined_result_all_videos/to_mots_txt/mots_det_seg/"
    out_dir="../my_data_for_ytvis_2019_track_result/youtube_vis_2019_out_pair_warp/valid_for_VIS/combined_result_all_videos/to_mots_txt/mots_seg_track_w_mask_score/DeepSORT/mask_min_det_conf_04_min_det_conf_04_max_cos_0.6_no_kalman_gate/"
    for cat_choose in cat.keys():
        os.makedirs(out_dir+cat_choose,exist_ok=True)
        for seq_id in tqdm(val_in_trainval_seqmap):
            track_txt_path=track_txt_dir+cat_choose+'/'+seq_id+'.txt'
            mask_txt_path=mask_txt_dir+cat_choose+'/'+seq_id+'.txt'
            out_path=out_dir+cat_choose+'/'+seq_id+'.txt'
            deal_seq_one(track_txt_path,mask_txt_path,cat_choose,out_path,mask_det_min_conf)
